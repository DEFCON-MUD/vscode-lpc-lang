{
  "fileTypes": ["c", "h"],
  "foldingStartMarker": "(?x)\/\\*\\*(?!\\*)|^(?![^{]*?\/\/|[^{]*?\/\\*(?!.*?\\*\/.*?\\{)).*?\\{\\s*($|\/\/|\/\\*(?!.*?\\*\/.*\\S))|(^\\s*\/\/\\s*(\\{\\{\\{))",
  "foldingStopMarker": "(?<!\\*)\\n\\*\\*\/|^\\s*\\}|\/\/\\s*\\}\\}\\}$",
  "keyEquivalent": "^~C",
  "name": "LPC",
  "patterns": [{
    "include": "#preprocessor-rule-enabled"
  }, {
    "include": "#preprocessor-rule-enabled-block"
  }, {
    "include": "#preprocessor-rule-disabled"
  }, {
    "include": "#preprocessor-rule-disabled-block"
  }, {
    "include": "#preprocessor-rule-other"
  }, {
    "include": "#preprocessor-rule-other-block"
  }, {
    "include": "#disabled"
  }, {
    "include": "#parens"
  }, {
    "include": "#comments"
  }, {
    "include": "#pragma-mark"
  }, {
    "include": "#fncall"
  }, {
    "include": "#block"
  }, {
    "comment": "Control flow keywords",
    "match": "\\b(if|else|while|for|foreach|do|return|continue|break|switch|case|default|goto|catch|lambda|gauge|inherit|import)\\b",
    "name": "keyword.control.lpc"
  }, {
    "match": "\\b(enum|float|int|typedef|void|object|class|mapping|string|array|multiset|mixed|function|program|bool|auto)\\b",
    "name": "storage.type.lpc"
  }, {
    "comment": "Modifiers",
    "match": "\\b(public|protected|private|constant|inline|local|final|optional|variant)\\b",
    "name": "storage.modifier.lpc"
  }, {
    "comment": "Numeric values",
    "match": "(?:\\b|(?<!\\.)(?=\\.))((0(x|X)[0-9a-fA-F]*)|(0(b|B)[01]+)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b",
    "name": "constant.numeric.lpc"
  }, {
    "comment": "Language constants",
    "match": "\\b(true|false)\\b",
    "name": "constant.language.lpc"
  }, {
    "begin": "\"",
    "beginCaptures": [{
      "name": "punctuation.definition.string.begin.lpc"
    }],
    "end": "\"",
    "endCaptures": [{
      "name": "punctuation.definition.string.end.lpc"
    }],
    "name": "string.quoted.double.lpc",
    "patterns": [{
      "include": "#string_escaped_char"
    }, {
      "include": "#string_placeholder"
    }]
  }, {
    "begin": "'",
    "beginCaptures": [{
      "name": "punctuation.definition.string.begin.lpc"
    }],
    "end": "'",
    "endCaptures": [{
      "name": "punctuation.definition.string.end.lpc"
    }],
    "name": "string.quoted.single.lpc",
    "patterns": [{
      "include": "#string_escaped_char"
    }]
  }, {
    "begin": "(?x)^\\s*\\#\\s*(define)\\s+((?<id>[a-zA-Z_][a-zA-Z0-9_]*))(?:(\\()(\\s* \\g<id> \\s*((,) \\s* \\g<id> \\s*)*(?:\\.\\.\\.)?)(\\)))?",
    "beginCaptures": {
      "1": {
        "name": "keyword.control.import.define.lpc"
      },
      "2": {
        "name": "entity.name.function.preprocessor.lpc"
      },
      "4": {
        "name": "punctuation.definition.parameters.lpc"
      },
      "5": {
        "name": "variable.parameter.preprocessor.lpc"
      },
      "7": {
        "name": "punctuation.separator.parameters.lpc"
      },
      "8": {
        "name": "punctuation.definition.parameters.lpc"
      }
    },
    "end": "(?=(?:\/\/|\/\\*))|$|\\n",
    "name": "meta.preprocessor.macro.lpc",
    "patterns": [{
      "match": "(?>\\\\\\s*\\n)",
      "name": "punctuation.separator.continuation.lpc"
    }, {
      "include": "$base"
    }]
  }, {
    "begin": "^\\s*#\\s*(error|warning)\\b",
    "captures": {
      "1": {
        "name": "keyword.control.import.error.lpc"
      }
    },
    "end": "$",
    "name": "meta.preprocessor.diagnostic.lpc",
    "patterns": [{
      "match": "(?>\\\\\\s*\\n)",
      "name": "punctuation.separator.continuation.lpc"
    }]
  }, {
    "begin": "^\\s*#\\s*(include|string)\\b",
    "captures": {
      "1": {
        "name": "keyword.control.import.include.lpc"
      }
    },
    "end": "(?=(?:\/\/|\/\\*))|$",
    "name": "meta.preprocessor.include.lpc",
    "patterns": [{
      "match": "(?>\\\\\\s*\\n)",
      "name": "punctuation.separator.continuation.lpc"
    }, {
      "begin": "\\\"",
      "beginCaptures": [{
        "name": "punctuation.definition.string.begin.lpc"
      }],
      "end": "\\\"",
      "endCaptures": [{
        "name": "punctuation.definition.string.end.lpc"
      }],
      "name": "string.quoted.double.include.lpc"
    }, {
      "begin": "<",
      "beginCaptures": [{
        "name": "punctuation.definition.string.begin.lpc"
      }],
      "end": ">",
      "endCaptures": [{
        "name": "punctuation.definition.string.end.lpc"
      }],
      "name": "string.quoted.other.lt-gt.include.lpc"
    }]
  }, {
    "begin": "^\\s*#\\s*(define|defined|elif|elseif|else|if|ifdef|ifndef|(line|[0-9]+)|pragma|undef|undefine|endif|charset|string)\\b",
    "captures": {
      "1": {
        "name": "keyword.control.import.lpc"
      }
    },
    "end": "(?=(?:\/\/|\/\\*))|$",
    "name": "meta.preprocessor.lpc",
    "patterns": [{
      "match": "(?>\\\\\\s*\\n)",
      "name": "punctuation.separator.continuation.lpc"
    }]
  }, {
    "begin": "(?x)(?:  ^|(?: (?= \\s ) (?<!else|return) (?<=\\w)|(?= \\s*[[:alnum:]_.|\\(\\)] )))(\\s*) (?!\\b(while|for|do|if|else|switch|catch|return|foreach|object|int|float|function|mapping|array|multiset|string|lambda|program|mixed|class)\\b\\s*)((?:`\\(\\)|`[-<.>^|&*~\/+%=!\\[\\]]+|`[[:alpha:]_][[:alnum:]_]*+|[[:alpha:]_][[:alnum:]_]*+)++)\\s*(?=\\()",
    "beginCaptures": {
      "1": {
        "name": "punctuation.whitespace.function.leading.lpc"
      },
      "3": {
        "name": "entity.name.function.lpc"
      },
      "4": {
        "name": "punctuation.definition.parameters.lpc"
      }
    },
    "end": "(?<=\\})|(?=#)|(;)",
    "name": "meta.function.lpc",
    "patterns": [{
      "include": "#comments"
    }, {
      "include": "#parens"
    }, {
      "match": "\\bconstant\\b",
      "name": "storage.modifier.lpc"
    }, {
      "include": "#block"
    }]
  }],
  "repository": {
    "block": {
      "begin": "\\{",
      "end": "\\}",
      "name": "meta.block.lpc",
      "patterns": [{
        "include": "#block_innards"
      }]
    },
    "block_innards": {
      "patterns": [{
        "include": "#fncall"
      }, {
        "include": "#block"
      }, {
        "include": "$base"
      }]
    },
    "comments": {
      "patterns": [{
        "begin": "\/\\*",
        "captures": [{
          "name": "punctuation.definition.comment.lpc"
        }],
        "end": "\\*\/",
        "name": "comment.block.lpc"
      },{
        "captures": {
          "1": {
            "name": "punctuation.definition.comment.lpc"
          }
        },
        "match": "(\/\/).*$\\n?",
        "name": "comment.line.double-slash.lpc"
      }]
    },
    "disabled": {
      "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
      "comment": "eat nested preprocessor if(def)s",
      "end": "^\\s*#\\s*endif\\b.*$",
      "patterns": [{
        "include": "#disabled"
      }, {
        "include": "#pragma-mark"
      }]
    },
    "fncall": {
      "patterns": [{
        "captures": {
          "1": {
            "name": "punctuation.whitespace.function-call.leading.lpc"
          },
          "2": {
            "name": "support.function.any-method.lpc"
          },
          "3": {
            "name": "punctuation.definition.parameters.lpc"
          }
        },
        "match": "(?x)(?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?(\\b(?!(while|for|do|if|else|foreach|lambda|switch|catch|enumerate|return|mapping|multiset|mixed|int|float|class|function|array|string|program|object|bool|auto|variant)\\s*\\()(?: `\\(\\)                  |`[-<.>^|&*~\/+%=!\\[\\]]+ |`[[:alnum:]_]            |[[:alpha:]_][[:alnum:]_]*+\\b)++)\\s*(\\()",
        "name": "meta.function-call.lpc"
      }, {
        "include": "#block"
      }]
    },
    "parens": {
      "begin": "\\(",
      "end": "\\)",
      "name": "meta.parens.lpc",
      "patterns": [{
        "include": "$base"
      }]
    },
    "pragma-mark": {
      "captures": {
        "1": {
          "name": "meta.preprocessor.lpc"
        },
        "2": {
          "name": "keyword.control.import.pragma.lpc"
        },
        "3": {
          "name": "meta.toc-list.pragma-mark.lpc"
        }
      },
      "match": "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))",
      "name": "meta.section"
    },
    "preprocessor-rule-disabled": {
      "begin": "^\\s*(#(if)\\s+(0)\\b).*",
      "captures": {
        "1": {
          "name": "meta.preprocessor.lpc"
        },
        "2": {
          "name": "keyword.control.import.if.lpc"
        },
        "3": {
          "name": "constant.numeric.preprocessor.lpc"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [{
        "begin": "^\\s*(#\\s*(else)\\b)",
        "captures": {
          "1": {
            "name": "meta.preprocessor.lpc"
          },
          "2": {
            "name": "keyword.control.import.else.lpc"
          }
        },
        "end": "(?=^\\s*#\\s*endif\\b.*$)",
        "patterns": [{
          "include": "$base"
        }]
      }, {
        "begin": "",
        "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
        "name": "comment.block.preprocessor.if-branch",
        "patterns": [{
          "include": "#disabled"
        }, {
          "include": "#pragma-mark"
        }]
      }]
    },
    "preprocessor-rule-disabled-block": {
      "begin": "^\\s*(#(if)\\s+(0)\\b).*",
      "captures": {
        "1": {
          "name": "meta.preprocessor.lpc"
        },
        "2": {
          "name": "keyword.control.import.if.lpc"
        },
        "3": {
          "name": "constant.numeric.preprocessor.lpc"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [{
        "begin": "^\\s*(#\\s*(else)\\b)",
        "captures": {
          "1": {
            "name": "meta.preprocessor.lpc"
          },
          "2": {
            "name": "keyword.control.import.else.lpc"
          }
        },
        "end": "(?=^\\s*#\\s*endif\\b.*$)",
        "patterns": [{
          "include": "#block_innards"
        }]
      }, {
        "begin": "",
        "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
        "name": "comment.block.preprocessor.if-branch.in-block",
        "patterns": [{
          "include": "#disabled"
        }, {
          "include": "#pragma-mark"
        }]
      }]
    },
    "preprocessor-rule-enabled": {
      "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
      "captures": {
        "1": {
          "name": "meta.preprocessor.lpc"
        },
        "2": {
          "name": "keyword.control.import.if.lpc"
        },
        "3": {
          "name": "constant.numeric.preprocessor.lpc"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [{
        "begin": "^\\s*(#\\s*(else)\\b).*",
        "captures": {
          "1": {
            "name": "meta.preprocessor.lpc"
          },
          "2": {
            "name": "keyword.control.import.else.lpc"
          }
        },
        "contentName": "comment.block.preprocessor.else-branch",
        "end": "(?=^\\s*#\\s*endif\\b.*$)",
        "patterns": [{
          "include": "#disabled"
        }, {
          "include": "#pragma-mark"
        }]
      }, {
        "begin": "",
        "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
        "patterns": [{
          "include": "$base"
        }]
      }]
    },
    "preprocessor-rule-enabled-block": {
      "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
      "captures": {
        "1": {
          "name": "meta.preprocessor.lpc"
        },
        "2": {
          "name": "keyword.control.import.if.lpc"
        },
        "3": {
          "name": "constant.numeric.preprocessor.lpc"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b)",
      "patterns": [{
        "begin": "^\\s*(#\\s*(else)\\b).*",
        "captures": {
          "1": {
            "name": "meta.preprocessor.lpc"
          },
          "2": {
            "name": "keyword.control.import.else.lpc"
          }
        },
        "contentName": "comment.block.preprocessor.else-branch.in-block",
        "end": "(?=^\\s*#\\s*endif\\b.*$)",
        "patterns": [{
          "include": "#disabled"
        }, {
          "include": "#pragma-mark"
        }]
      }, {
        "begin": "",
        "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
        "patterns": [{
          "include": "#block_innards"
        }]
      }]
    },
    "preprocessor-rule-other": {
      "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?:\/\/|\/\\*))|$))",
      "captures": {
        "1": {
          "name": "meta.preprocessor.lpc"
        },
        "2": {
          "name": "keyword.control.import.lpc"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b).*$",
      "patterns": [{
        "include": "$base"
      }]
    },
    "preprocessor-rule-other-block": {
      "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?:\/\/|\/\\*))|$))",
      "captures": {
        "1": {
          "name": "meta.preprocessor.lpc"
        },
        "2": {
          "name": "keyword.control.import.lpc"
        }
      },
      "end": "^\\s*(#\\s*(endif)\\b).*$",
      "patterns": [{
        "include": "#block_innards"
      }]
    },
    "string_escaped_char": {
      "patterns": [{
        "match": "\\\\(\\\\|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|d[0-9]+|[[:alnum:]'\"?])",
        "name": "constant.character.escape.lpc"
      }, {
        "match": "\\\\.",
        "name": "invalid.illegal.unknown-escape.lpc"
      }]
    },
    "string_placeholder": {
      "patterns": [{
        "match": "(?x)%(?!\\s|%)\\*?(\\d+\\$)?[*#0\\- +'\\[\\]]*[,;:_]?((-?\\d+)|\\*(-?\\d+\\$)?)?(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?[diouxXDOUeEfFgGaACcSspnYyMmDdHhWtzp%{}]",
        "name": "constant.other.placeholder.lpc"
      }, {
        "match": "%(?!\\s|%)(!<%)",
        "name": "invalid.illegal.placeholder.lpc"
      }]
    }
  },
  "scopeName": "source.lpc",
  "uuid": "f0c5f4ad-3e8a-4add-9ebf-2ce1d5e5262f"
}